{"ast":null,"code":"export default {\n  data() {\n    return {\n      views: []\n    };\n  },\n  beforeMount() {\n    this.loadViews();\n  },\n  methods: {\n    loadViews() {\n      const creds = this.$store.state.credentials;\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(creds)\n      };\n      fetch('http://localhost:8081/views', requestOptions).then(response => response.json()).then(data => {\n        this.views = data;\n      }).catch(error => console.error('Error fetching view data:', error));\n    }\n  }\n};","map":{"version":3,"names":["data","views","beforeMount","loadViews","methods","creds","$store","state","credentials","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","catch","error","console"],"sources":["/Users/adamszpilewicz/Documents/languages/golang/vue-app/database-extractor-app/frontend/src/components/AppViews.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-4\">\n    <div class=\"shadow p-4 bg-white rounded\">\n      <h1 class=\"mb-3\">Database Views</h1>\n      <button @click=\"loadViews\" class=\"btn btn-primary mb-3\">Reload</button>\n      <hr>\n\n      <!-- Table to display the views -->\n      <table class=\"table table-bordered table-striped table-hover\">\n        <thead class=\"thead-dark\">\n        <tr>\n          <th>View Name</th>\n          <th>Owner</th>\n          <th>Definition</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr v-for=\"view in views\" :key=\"view.view_name\">\n          <td>{{ view.view_name }}</td>\n          <td>{{ view.owner }}</td>\n          <td class=\"definition-column\">\n            <pre>{{ view.definition }}</pre>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      views: []\n    };\n  },\n  beforeMount() {\n    this.loadViews();\n  },\n  methods: {\n    loadViews() {\n      const creds = this.$store.state.credentials;\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(creds)\n      };\n\n      fetch('http://localhost:8081/views', requestOptions)\n          .then(response => response.json())\n          .then(data => {\n            this.views = data;\n          })\n          .catch(error => console.error('Error fetching view data:', error));\n    }\n  }\n}\n</script>\n\n<style scoped>\n.definition-column pre {\n  white-space: pre-wrap;\n  max-height: 100px;\n  overflow-y: auto;\n}\n</style>\n"],"mappings":"AA+BA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,SAAS,CAAC,CAAC;EAClB,CAAC;EACDC,OAAO,EAAE;IACPD,SAASA,CAAA,EAAG;MACV,MAAME,KAAI,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,WAAW;MAC3C,MAAMC,cAAa,GAAI;QACrBC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,KAAK;MAC5B,CAAC;MAEDU,KAAK,CAAC,6BAA6B,EAAEN,cAAc,EAC9CO,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAAChB,IAAG,IAAK;QACZ,IAAI,CAACC,KAAI,GAAID,IAAI;MACnB,CAAC,EACAmB,KAAK,CAACC,KAAI,IAAKC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC,CAAC;IACxE;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}