{"ast":null,"code":"import CodeMirror from \"codemirror\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/mode/sql/sql.js\";\nexport default {\n  data() {\n    return {\n      editor: null,\n      // To store the CodeMirror instance\n      query: '',\n      result: [],\n      loading: false\n    };\n  },\n  mounted() {\n    this.editor = CodeMirror(document.getElementById('sqlEditor'), {\n      lineNumbers: true,\n      mode: \"text/x-mysql\",\n      value: this.query\n    });\n    this.editor.on(\"change\", editor => {\n      this.query = editor.getValue();\n    });\n  },\n  watch: {\n    query(newQuery) {\n      if (this.editor && this.editor.getValue() !== newQuery) {\n        this.editor.setValue(newQuery);\n      }\n    }\n  },\n  methods: {\n    async sendQuery() {\n      this.loading = true;\n      try {\n        const creds = this.$store.state.credentials;\n        const dataToSend = {\n          credentials: creds,\n          query: this.query\n        };\n        const requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(dataToSend)\n        };\n        const response = await fetch('http://localhost:8081/custom-query', requestOptions);\n        const result = await response.json();\n        this.result = result.data;\n      } catch (error) {\n        console.error(\"Error executing query:\", error);\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["CodeMirror","data","editor","query","result","loading","mounted","document","getElementById","lineNumbers","mode","value","on","getValue","watch","newQuery","setValue","methods","sendQuery","creds","$store","state","credentials","dataToSend","requestOptions","method","headers","body","JSON","stringify","response","fetch","json","error","console"],"sources":["/Users/adamszpilewicz/Documents/languages/golang/vue-app/database-extractor-app/frontend/src/components/AppCustomQuery.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    <h2>Custom Query</h2>\n    <div class=\"form-group mt-3\">\n      <label for=\"sqlQuery\">Enter your SQL Query:</label>\n      <div id=\"sqlEditor\"></div> <!-- CodeMirror will be attached here -->\n    </div>\n    <button class=\"btn btn-primary mt-3\" @click=\"sendQuery\">Execute</button>\n\n    <!-- Loading Spinner -->\n    <div v-if=\"loading\" class=\"mt-5 d-flex justify-content-center\">\n      <div class=\"spinner-grow text-primary\" role=\"status\" style=\"opacity: 0.7;\"></div>\n    </div>\n\n    <!-- Result Table -->\n    <div v-if=\"result && result.length\" class=\"mt-5\">\n      <table class=\"table table-striped table-bordered\">\n        <thead class=\"thead-dark\">\n        <tr>\n          <th v-for=\"column in Object.keys(result[0])\" :key=\"column\">{{ column }}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr v-for=\"row in result\" :key=\"row.id\">\n          <td v-for=\"column in Object.keys(row)\" :key=\"column\">{{ row[column] }}</td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport CodeMirror from \"codemirror\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/mode/sql/sql.js\";\n\nexport default {\n  data() {\n    return {\n      editor: null, // To store the CodeMirror instance\n      query: '',\n      result: [],\n      loading: false\n    };\n  },\n  mounted() {\n    this.editor = CodeMirror(document.getElementById('sqlEditor'), {\n      lineNumbers: true,\n      mode: \"text/x-mysql\",\n      value: this.query\n    });\n\n    this.editor.on(\"change\", editor => {\n      this.query = editor.getValue();\n    });\n  },\n  watch: {\n    query(newQuery) {\n      if (this.editor && this.editor.getValue() !== newQuery) {\n        this.editor.setValue(newQuery);\n      }\n    }\n  },\n  methods: {\n    async sendQuery() {\n      this.loading = true;\n      try {\n        const creds = this.$store.state.credentials;\n        const dataToSend = {\n          credentials: creds,\n          query: this.query\n        };\n        const requestOptions = {\n          method: 'POST',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify(dataToSend)\n        };\n\n        const response = await fetch('http://localhost:8081/custom-query', requestOptions);\n        const result = await response.json();\n\n        this.result = result.data;\n      } catch (error) {\n        console.error(\"Error executing query:\", error);\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* Custom styles for the transparent blue spinner */\n.spinner-grow.text-primary {\n  background-color: rgba(0, 123, 255, 0.7);\n}\n\n/* Additional styles for CodeMirror (you can customize as per your need) */\n.CodeMirror {\n  border: 1px solid #eee;\n  height: auto;\n  width: 100%;\n}\n</style>\n"],"mappings":"AAiCA,OAAOA,UAAS,MAAO,YAAY;AACnC,OAAO,+BAA+B;AACtC,OAAO,4BAA4B;AAEnC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,IAAI;MAAE;MACdC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACJ,MAAK,GAAIF,UAAU,CAACO,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,EAAE;MAC7DC,WAAW,EAAE,IAAI;MACjBC,IAAI,EAAE,cAAc;MACpBC,KAAK,EAAE,IAAI,CAACR;IACd,CAAC,CAAC;IAEF,IAAI,CAACD,MAAM,CAACU,EAAE,CAAC,QAAQ,EAAEV,MAAK,IAAK;MACjC,IAAI,CAACC,KAAI,GAAID,MAAM,CAACW,QAAQ,CAAC,CAAC;IAChC,CAAC,CAAC;EACJ,CAAC;EACDC,KAAK,EAAE;IACLX,KAAKA,CAACY,QAAQ,EAAE;MACd,IAAI,IAAI,CAACb,MAAK,IAAK,IAAI,CAACA,MAAM,CAACW,QAAQ,CAAC,MAAME,QAAQ,EAAE;QACtD,IAAI,CAACb,MAAM,CAACc,QAAQ,CAACD,QAAQ,CAAC;MAChC;IACF;EACF,CAAC;EACDE,OAAO,EAAE;IACP,MAAMC,SAASA,CAAA,EAAG;MAChB,IAAI,CAACb,OAAM,GAAI,IAAI;MACnB,IAAI;QACF,MAAMc,KAAI,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,WAAW;QAC3C,MAAMC,UAAS,GAAI;UACjBD,WAAW,EAAEH,KAAK;UAClBhB,KAAK,EAAE,IAAI,CAACA;QACd,CAAC;QACD,MAAMqB,cAAa,GAAI;UACrBC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAC,cAAc,EAAE;UAAkB,CAAC;UAC7CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,UAAU;QACjC,CAAC;QAED,MAAMO,QAAO,GAAI,MAAMC,KAAK,CAAC,oCAAoC,EAAEP,cAAc,CAAC;QAClF,MAAMpB,MAAK,GAAI,MAAM0B,QAAQ,CAACE,IAAI,CAAC,CAAC;QAEpC,IAAI,CAAC5B,MAAK,GAAIA,MAAM,CAACH,IAAI;MAC3B,EAAE,OAAOgC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,UAAU;QACR,IAAI,CAAC5B,OAAM,GAAI,KAAK;MACtB;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}