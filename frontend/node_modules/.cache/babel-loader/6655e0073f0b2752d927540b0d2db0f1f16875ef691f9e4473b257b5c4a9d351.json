{"ast":null,"code":"export default {\n  props: ['tableName'],\n  data() {\n    return {\n      columns: [] // for storing columns info\n    };\n  },\n\n  created() {\n    this.loadColumns();\n  },\n  methods: {\n    loadColumns() {\n      const creds = this.$store.state.credentials;\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(creds)\n      };\n      fetch(`http://localhost:8081/schemas/${this.tableName}`, requestOptions).then(response => response.json()).then(data => {\n        if (!data.error && data.columns) {\n          this.columns = data.columns;\n        } else {\n          console.error(data.message);\n        }\n      }).catch(error => console.error('Error fetching column data:', error));\n    }\n  }\n};","map":{"version":3,"names":["props","data","columns","created","loadColumns","methods","creds","$store","state","credentials","requestOptions","method","headers","body","JSON","stringify","fetch","tableName","then","response","json","error","console","message","catch"],"sources":["/Users/adamszpilewicz/Documents/languages/golang/vue-app/database-extractor-app/frontend/src/components/TableInfoComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <table class=\"table table-bordered\">\n      <thead>\n      <tr>\n        <th>Table Name</th>\n        <th>Column Name</th>\n        <th>Column Type</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr v-for=\"column in columns\" :key=\"column.column_name\">\n        <td>{{ tableName }}</td>\n        <td>{{ column.column_name }}</td>\n        <td>{{ column.column_type }}</td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ['tableName'],\n  data() {\n    return {\n      columns: [] // for storing columns info\n    };\n  },\n  created() {\n    this.loadColumns();\n  },\n  methods: {\n    loadColumns() {\n      const creds = this.$store.state.credentials;\n\n      const requestOptions = {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(creds)\n      };\n\n      fetch(`http://localhost:8081/schemas/${this.tableName}`, requestOptions)\n          .then(response => response.json())\n          .then(data => {\n            if (!data.error && data.columns) {\n              this.columns = data.columns;\n            } else {\n              console.error(data.message);\n            }\n          })\n          .catch(error => console.error('Error fetching column data:', error));\n    }\n  }\n}\n</script>\n\n"],"mappings":"AAsBA,eAAe;EACbA,KAAK,EAAE,CAAC,WAAW,CAAC;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAC,CAAE;IACd,CAAC;EACH,CAAC;;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC,CAAC;EACpB,CAAC;EACDC,OAAO,EAAE;IACPD,WAAWA,CAAA,EAAG;MACZ,MAAME,KAAI,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,WAAW;MAE3C,MAAMC,cAAa,GAAI;QACrBC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAC,cAAc,EAAE;QAAkB,CAAC;QAC7CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,KAAK;MAC5B,CAAC;MAEDU,KAAK,CAAE,iCAAgC,IAAI,CAACC,SAAU,EAAC,EAAEP,cAAc,EAClEQ,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAACjB,IAAG,IAAK;QACZ,IAAI,CAACA,IAAI,CAACoB,KAAI,IAAKpB,IAAI,CAACC,OAAO,EAAE;UAC/B,IAAI,CAACA,OAAM,GAAID,IAAI,CAACC,OAAO;QAC7B,OAAO;UACLoB,OAAO,CAACD,KAAK,CAACpB,IAAI,CAACsB,OAAO,CAAC;QAC7B;MACF,CAAC,EACAC,KAAK,CAACH,KAAI,IAAKC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC,CAAC;IAC1E;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}