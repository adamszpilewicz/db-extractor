{"ast":null,"code":"import Prism from 'prismjs';\nexport default {\n  data() {\n    return {\n      query: '',\n      result: [],\n      loading: false\n    };\n  },\n  watch: {\n    query(newVal) {\n      // Re-highlight code whenever the query changes\n      this.$nextTick(() => {\n        Prism.highlightAll();\n      });\n    }\n  },\n  methods: {\n    async sendQuery() {\n      this.loading = true;\n      try {\n        const creds = this.$store.state.credentials;\n        const dataToSend = {\n          credentials: creds,\n          query: this.query\n        };\n        const requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(dataToSend)\n        };\n        const response = await fetch('http://localhost:8081/custom-query', requestOptions);\n        const result = await response.json();\n        this.result = result.data;\n      } catch (error) {\n        console.error(\"Error executing query:\", error);\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["Prism","data","query","result","loading","watch","newVal","$nextTick","highlightAll","methods","sendQuery","creds","$store","state","credentials","dataToSend","requestOptions","method","headers","body","JSON","stringify","response","fetch","json","error","console"],"sources":["/Users/adamszpilewicz/Documents/languages/golang/vue-app/database-extractor-app/frontend/src/components/AppCustomQuery.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    <h2>Custom Query</h2>\n    <div class=\"form-group mt-3\">\n      <label for=\"sqlQuery\">Enter your SQL Query:</label>\n      <pre class=\"language-sql form-control\" style=\"white-space: pre-wrap;\"><code v-text=\"query\"></code></pre>\n      <!-- Add a hidden textarea for collecting the actual input -->\n      <textarea v-model=\"query\" style=\"display: none;\"></textarea>\n    </div>\n    <button class=\"btn btn-primary mt-3\" @click=\"sendQuery\">Execute</button>\n\n    <!-- Loading Spinner -->\n    <div v-if=\"loading\" class=\"mt-5 d-flex justify-content-center\">\n      <div class=\"spinner-grow text-primary\" role=\"status\" style=\"opacity: 0.7;\"></div>\n    </div>\n\n    <!-- Result Table -->\n    <div v-if=\"result && result.length\" class=\"mt-5\">\n      <table class=\"table table-striped table-bordered\">\n        <thead class=\"thead-dark\">\n        <tr>\n          <th v-for=\"column in Object.keys(result[0])\" :key=\"column\">{{ column }}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr v-for=\"row in result\" :key=\"row.id\">\n          <td v-for=\"column in Object.keys(row)\" :key=\"column\">{{ row[column] }}</td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Prism from 'prismjs';\n\nexport default {\n  data() {\n    return {\n      query: '',\n      result: [],\n      loading: false\n    };\n  },\n  watch: {\n    query(newVal) {\n      // Re-highlight code whenever the query changes\n      this.$nextTick(() => {\n        Prism.highlightAll();\n      });\n    }\n  },\n  methods: {\n    async sendQuery() {\n      this.loading = true;\n      try {\n        const creds = this.$store.state.credentials;\n        const dataToSend = {\n          credentials: creds,\n          query: this.query\n        };\n        const requestOptions = {\n          method: 'POST',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify(dataToSend)\n        };\n\n        const response = await fetch('http://localhost:8081/custom-query', requestOptions);\n        const result = await response.json();\n\n        this.result = result.data;\n      } catch (error) {\n        console.error(\"Error executing query:\", error);\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* Custom styles for the transparent blue spinner */\n.spinner-grow.text-primary {\n  background-color: rgba(0, 123, 255, 0.7);\n}\n\n@import \"~prismjs/themes/prism.css\"; /* Importing the default Prism theme */\n</style>\n"],"mappings":"AAmCA,OAAOA,KAAI,MAAO,SAAS;AAE3B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLH,KAAKA,CAACI,MAAM,EAAE;MACZ;MACA,IAAI,CAACC,SAAS,CAAC,MAAM;QACnBP,KAAK,CAACQ,YAAY,CAAC,CAAC;MACtB,CAAC,CAAC;IACJ;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,SAASA,CAAA,EAAG;MAChB,IAAI,CAACN,OAAM,GAAI,IAAI;MACnB,IAAI;QACF,MAAMO,KAAI,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,WAAW;QAC3C,MAAMC,UAAS,GAAI;UACjBD,WAAW,EAAEH,KAAK;UAClBT,KAAK,EAAE,IAAI,CAACA;QACd,CAAC;QACD,MAAMc,cAAa,GAAI;UACrBC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAC,cAAc,EAAE;UAAkB,CAAC;UAC7CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,UAAU;QACjC,CAAC;QAED,MAAMO,QAAO,GAAI,MAAMC,KAAK,CAAC,oCAAoC,EAAEP,cAAc,CAAC;QAClF,MAAMb,MAAK,GAAI,MAAMmB,QAAQ,CAACE,IAAI,CAAC,CAAC;QAEpC,IAAI,CAACrB,MAAK,GAAIA,MAAM,CAACF,IAAI;MAC3B,EAAE,OAAOwB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,UAAU;QACR,IAAI,CAACrB,OAAM,GAAI,KAAK;MACtB;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}